[cocos2d-x]
# the prefix to be added to the generated functions. You might or might not use this in your own
# templates
prefix = cocos2dx

# create a target namespace (in javascript, this would create some code like the equiv. to `ns = ns || {}`)
# all classes will be embedded in that namespace
target_namespace = cc

android_headers = -I%(androidndkdir)s/platforms/android-14/arch-arm/usr/include -I%(androidndkdir)s/sources/cxx-stl/gnu-libstdc++/4.7/libs/armeabi-v7a/include -I%(androidndkdir)s/sources/cxx-stl/gnu-libstdc++/4.7/include -I%(androidndkdir)s/sources/cxx-stl/gnu-libstdc++/4.8/libs/armeabi-v7a/include -I%(androidndkdir)s/sources/cxx-stl/gnu-libstdc++/4.8/include
android_flags = -D_SIZE_T_DEFINED_

clang_headers = -I%(clangllvmdir)s/lib/clang/%(clang_version)s/include
clang_flags = -nostdinc -x c++ -std=c++11 -U __SSE__

cocos_headers = -I%(cocosdir)s/cocos -I%(cocosdir)s/cocos/platform/android -I%(cocosdir)s/cocos/editor-support -I%(cocosdir)s/external
cocos_flags = -DANDROID

cxxgenerator_headers =

# extra arguments for clang
extra_arguments = %(android_headers)s %(clang_headers)s %(cxxgenerator_headers)s %(cocos_headers)s %(android_flags)s %(clang_flags)s %(cocos_flags)s %(extra_flags)s

# what headers to parse
headers = %(cocosdir)s/cocos/cocos2d.h %(cocosdir)s/cocos/base/CCAsyncTaskPool.h

# what classes to produce code for. You can use regular expressions here. When testing the regular
# expression, it will be enclosed in "^$", like this: "^Menu*$".
classes = Node Sprite FileUtils$ Director Scene Label.* Application GLView SpriteFrameCache AnimationCache ActionManager TextureCache Scheduler


# 某个类只导出这些接口, 配置了 only 的类不接受 skip 控制, 除了 XX::[*]
only = Scheduler::[unscheduleAll],
        GLView::[getFrameSize]

# what should we skip? in the format ClassName::[function function]
# ClassName is a regular expression, but will be used like this: "^ClassName$" functions are also
# regular expressions, they will not be surrounded by "^$". If you want to skip a whole class, just
# add a single "*" as functions. See bellow for several examples. A special class name is "*", which
# will apply to all class names. This is a convenience wildcard to be able to skip similar named
# functions from all classes.

skip = Node::[setGLServerState description getUserObject .*UserData getGLServerState .*schedule getPosition$ setContentSize setAnchorPoint enumerateChildren .*Callback .*Transform .*Quat .*ActionManager .*CascadeColorEnabled .*Tag .*SkewY .*GLProgram* .*CameraMask .*3D .*Skew* .*Exit* .*Arrival* .*Z .*UserObject setEventDispatcher setScheduler getNumberOfRunningActions reorderChild getScene getDescription],
        Sprite::[getQuad ^setPosition$ ^create$ setPolygonInfo initWithPolygon getPolygonInfo initWith .*BatchNode .*Dirty .*AtlasIndex setVertexRect .*TextureAtlas updateTransform getBatchNode setBatchNode setVertexRect setDisplayFrameWithAnimationName isDirty setDirty isTextureRectRotated getAtlasIndex setAtlasIndex getTextureAtlas setTextureAtlas getOffsetPosition getDescription draw getResourceType getResourceName],
        FileUtils::[getFileData getDataFromFile writeDataToFile getFullPathCache],
        Director::[getAccelerometer getProjection getFrustum getRenderer getCocos2dThreadId setEventDispatcher getDeltaTime setGLDefaultValues setActionManager setAlphaBlending popToRootScene loadMatrix getNotificationNode isSendCleanupToScene mainLoop setDepthTest getFrameRate getSecondsPerFrame resetMatrixStack convertToUI pushMatrix setDefaultValues init setScheduler getMatrix setViewport popToSceneStackLevel isNextDeltaTimeZero setClearColor setOpenGLView convertToGL drawScene loadIdentityMatrix multiplyMatrix setNextDeltaTimeZero popMatrix getAnimationInterval getZEye getTotalFrames],
        Scene::[getCameras getLights .*(Physics3D).* .*(NavMesh).* getDescription getDefaultCamera createWithSize],
        Label::[createWithTTF],
        Copying::[*],
        LabelProtocol::[*],
        LabelTextFormatProtocol::[*],
        LabelTTF::[*],
        LabelBMFont::[*],
        Application::[getCurrentLanguageCode getVersion applicationScreenSizeChanged run setAnimationInterval openURL],
        SpriteFrameCache::[reloadTexture init destroyInstance],
        AnimationCache::[new init addAnimationsWithDictionary destroyInstance]

rename_functions = SpriteFrameCache::[addSpriteFramesWithFile=addSpriteFrames getSpriteFrameByName=getSpriteFrame],
    ProgressTimer::[setReverseProgress=setReverseDirection],
    AnimationCache::[addAnimationsWithFile=addAnimations],
    GLProgram::[setUniformLocationWith1i=setUniformLocationI32],
    Node::[removeFromParentAndCleanup=removeFromParent removeAllChildrenWithCleanup=removeAllChildren],
    LabelAtlas::[create=_create],
    Touch::[getID=getId],
    FileUtils::[loadFilenameLookupDictionaryFromFile=loadFilenameLookup],
    Director::[end=endToLua]

rename_classes = ParticleSystemQuad::ParticleSystem

# for all class names, should we remove something when registering in the target VM?
remove_prefix =

# classes for which there will be no "parent" lookup
classes_have_no_parents = Director FileUtils TMXMapInfo Application

# base classes which will be skipped when their sub-classes found them.
base_classes_to_skip = Clonable

# classes that create no constructor
# Set is special and we will use a hand-written constructor
abstract_classes = Action FiniteTimeAction ActionInterval ActionEase EaseRateAction EaseElastic EaseBounce ActionInstant GridAction Grid3DAction TiledGrid3DAction Director SpriteFrameCache TransitionEaseScene Set FileUtils Application ClippingNode Label GLViewImpl GLView EventAcceleration DisplayLinkDirector Component Console EventListener BaseLight AnimationCache Scheduler ActionManager LabelAtlas Sprite TextureCache Node Scene

# Determining whether to use script object(js object) to control the lifecycle of native(cpp) object or the other way around. Supported values are 'yes' or 'no'.
script_control_cpp = no

